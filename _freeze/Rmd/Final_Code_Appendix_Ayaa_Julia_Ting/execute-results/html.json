{
  "hash": "b2eec9f6e91f126256e6448af593f489",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ayaa Asoba, Julia Coelho, Ting Huang stat253_project\"\noutput: html_document\n---\n\n\n\n\n\n\n## Reading in Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: rpart\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(vip)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'vip'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:utils':\n\n    vi\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(ggpubr)\nlibrary(mgcv)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: nlme\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'nlme' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'nlme'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    collapse\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'.\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'broom' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dials' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'modeldata' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'recipes' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ nlme::collapse()  masks dplyr::collapse()\n✖ purrr::discard()  masks scales::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ dials::prune()    masks rpart::prune()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(probably) #install.packages('probably')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'probably'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    as.factor, as.ordered\n```\n\n\n:::\n\n```{.r .cell-code}\ntidymodels_prefer()\nesgdata <- read_csv('ESGData.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `` -> `...67`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 16013 Columns: 67\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Country Name, Country Code, Indicator Name, Indicator Code\ndbl (62): 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, ...\nlgl  (1): ...67\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nesgdata %>% distinct(`Indicator Name`,`Indicator Code`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 67 × 2\n   `Indicator Name`                                             `Indicator Code`\n   <chr>                                                        <chr>           \n 1 Access to clean fuels and technologies for cooking (% of po… EG.CFT.ACCS.ZS  \n 2 Access to electricity (% of population)                      EG.ELC.ACCS.ZS  \n 3 Adjusted savings: natural resources depletion (% of GNI)     NY.ADJ.DRES.GN.…\n 4 Adjusted savings: net forest depletion (% of GNI)            NY.ADJ.DFOR.GN.…\n 5 Agricultural land (% of land area)                           AG.LND.AGRI.ZS  \n 6 Agriculture, forestry, and fishing, value added (% of GDP)   NV.AGR.TOTL.ZS  \n 7 Annual freshwater withdrawals, total (% of internal resourc… ER.H2O.FWTL.ZS  \n 8 Annualized average growth rate in per capita real survey me… SI.SPR.PCAP.ZG  \n 9 Cause of death, by communicable diseases and maternal, pren… SH.DTH.COMM.ZS  \n10 Children in employment, total (% of children ages 7-14)      SL.TLF.0714.ZS  \n# ℹ 57 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Data cleaning\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data cleaning\nesgdata_clean <- filter(esgdata,`Indicator Code`%in% c(\"EN.ATM.CO2E.PC\",\"EG.FEC.RNEW.ZS\", \"EG.ELC.RNEW.ZS\",\"EG.EGY.PRIM.PP.KD\",\"EG.USE.COMM.FO.ZS\",\"EN.POP.DNST\",\"AG.LND.AGRI.ZS\",\"NV.AGR.TOTL.ZS\",\"EG.ELC.ACCS.ZS\",\"SP.DYN.LE00.IN\",\"SI.DST.FRST.20\",\"SI.POV.GINI\",\"IT.NET.USER.ZS\",\"GE.EST\",\"AG.LND.FRST.ZS\",\"GB.XPD.RSDV.GD.ZS\",\"SE.PRM.ENRR\"))\nesgdata_clean <- select(esgdata_clean,'Country Code','Country Name','Indicator Name','Indicator Code','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018')\nesgdataAll <- esgdata_clean %>%\n  rename(CountryCode=\"Country Code\") %>% rename(CountryName=\"Country Name\") %>% rename(IndicatorName=\"Indicator Name\") %>% rename(IndicatorCode=\"Indicator Code\")\nesgdataAll <- esgdataAll %>%\n  filter(!CountryCode %in% c(\"ARB\",\"CEB\",\"CSS\",\"ECA\",\"EAP\",\"EAR\",\"EAS\",\"ECS\",\"EMU\",\"EUU\",\"FCS\",\"HIC\",\"HPC\",\"IBD\",\"IBT\",\"IDA\",\"IDB\",\"IDX\",\"LDC\",\"LCN\",\"LIC\",\"LAC\",\"LMC\",\"LMY\",\"LTE\",\"MIC\",\"MEA\",\"MNA\",\"NAC\",\"OED\",\"OSS\",\"PRE\",\"PSS\",\"PST\",\"SAS\",\"SSA\",\"SSF\",\"SST\",\"TEA\",\"TMN\",\"TEC\",\"TLA\",\"TSA\",\"TSS\",\"UMC\",\"WLD\")) %>%\n  pivot_longer(-c('CountryCode','CountryName','IndicatorName','IndicatorCode'), names_to = 'Year', values_to = 'Values') %>% \n  select(-`IndicatorName`) %>% \n  pivot_wider(names_from='IndicatorCode',values_from = 'Values')\nesgdataAll <- esgdataAll %>%\n   rename(electricity=\"EG.ELC.ACCS.ZS\") %>% rename(agroLand=\"AG.LND.AGRI.ZS\") %>% rename(agroValue=\"NV.AGR.TOTL.ZS\") %>% rename(co2=\"EN.ATM.CO2E.PC\") %>% rename(energyIntensity=\"EG.EGY.PRIM.PP.KD\") %>% rename(forestArea=\"AG.LND.FRST.ZS\") %>% rename(fossilFuel=\"EG.USE.COMM.FO.ZS\") %>% rename(gini=\"SI.POV.GINI\") %>% rename(govtEfficacy=\"GE.EST\") %>% rename(incomeLowest20=\"SI.DST.FRST.20\") %>% rename(internet=\"IT.NET.USER.ZS\") %>% rename(lifeExpectancy=\"SP.DYN.LE00.IN\")  %>% rename(popDensity=\"EN.POP.DNST\") %>% rename(renewableElec=\"EG.ELC.RNEW.ZS\") %>% rename(renewableEnergy=\"EG.FEC.RNEW.ZS\") %>% rename(research=\"GB.XPD.RSDV.GD.ZS\") %>% rename(schoolEnroll=\"SE.PRM.ENRR\")\nesgdataAll <- esgdataAll %>%\n  mutate(Year = as.numeric(Year))\nesgdataAll_sub <- esgdataAll %>% na.omit()\nesgdataAll_sub %>% purrr::map (~sum(is.na(.)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$CountryCode\n[1] 0\n\n$CountryName\n[1] 0\n\n$Year\n[1] 0\n\n$electricity\n[1] 0\n\n$agroLand\n[1] 0\n\n$agroValue\n[1] 0\n\n$co2\n[1] 0\n\n$energyIntensity\n[1] 0\n\n$forestArea\n[1] 0\n\n$fossilFuel\n[1] 0\n\n$gini\n[1] 0\n\n$govtEfficacy\n[1] 0\n\n$incomeLowest20\n[1] 0\n\n$internet\n[1] 0\n\n$lifeExpectancy\n[1] 0\n\n$popDensity\n[1] 0\n\n$renewableElec\n[1] 0\n\n$renewableEnergy\n[1] 0\n\n$research\n[1] 0\n\n$schoolEnroll\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nesgdata_cv10 <- vfold_cv(esgdataAll_sub, v = 10)  # 6 folds\ndata_rec <- recipe(co2 ~ . , data = esgdataAll_sub) %>%\n  update_role(`CountryCode`,new_role = 'ID') %>%\n  update_role(`CountryName`,new_role = 'ID') %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_normalize(all_numeric_predictors()) %>%  # important standardization step for LASSO\n    step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\ndata_rec %>% prep(esgdataAll_sub) %>%juice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 713 × 20\n   CountryCode CountryName    Year electricity agroLand agroValue\n   <fct>       <fct>         <dbl>       <dbl>    <dbl>     <dbl>\n 1 ALB         Albania     -0.0415     0.291    -0.0194    1.94  \n 2 ARG         Argentina   -2.77      -0.304     0.170     0.0142\n 3 ARG         Argentina   -2.32      -0.238     0.173    -0.0472\n 4 ARG         Argentina   -1.86      -0.174     0.176    -0.145 \n 5 ARG         Argentina   -1.41      -0.112     0.180     0.802 \n 6 ARG         Argentina   -1.18      -0.0831    0.220     0.823 \n 7 ARG         Argentina   -0.952     -0.0548    0.285     0.486 \n 8 ARG         Argentina   -0.724     -0.0278    0.349     0.413 \n 9 ARG         Argentina   -0.497     -0.00166   0.410     0.241 \n10 ARG         Argentina   -0.269      0.0241    0.464     0.330 \n# ℹ 703 more rows\n# ℹ 14 more variables: energyIntensity <dbl>, forestArea <dbl>,\n#   fossilFuel <dbl>, gini <dbl>, govtEfficacy <dbl>, incomeLowest20 <dbl>,\n#   internet <dbl>, lifeExpectancy <dbl>, popDensity <dbl>,\n#   renewableElec <dbl>, renewableEnergy <dbl>, research <dbl>,\n#   schoolEnroll <dbl>, co2 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Regression Models\n\n### Linear Model Recipe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_rec <- recipe(co2 ~ . , data = esgdataAll_sub) %>%\n  update_role(`Year`,new_role = 'ID') %>%\n  update_role(`CountryCode`,new_role = 'ID') %>%\n  update_role(`CountryName`,new_role = 'ID') %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_normalize(all_numeric_predictors()) %>%  # important standardization step for LASSO\n    step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\n    \nesg_rec %>% prep(esgdataAll_sub) %>% juice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 713 × 20\n   CountryCode CountryName  Year electricity agroLand agroValue energyIntensity\n   <fct>       <fct>       <dbl>       <dbl>    <dbl>     <dbl>           <dbl>\n 1 ALB         Albania      2008     0.291    -0.0194    1.94            -0.640\n 2 ARG         Argentina    1996    -0.304     0.170     0.0142          -0.324\n 3 ARG         Argentina    1998    -0.238     0.173    -0.0472          -0.388\n 4 ARG         Argentina    2000    -0.174     0.176    -0.145           -0.298\n 5 ARG         Argentina    2002    -0.112     0.180     0.802           -0.186\n 6 ARG         Argentina    2003    -0.0831    0.220     0.823           -0.210\n 7 ARG         Argentina    2004    -0.0548    0.285     0.486           -0.207\n 8 ARG         Argentina    2005    -0.0278    0.349     0.413           -0.314\n 9 ARG         Argentina    2006    -0.00166   0.410     0.241           -0.306\n10 ARG         Argentina    2007     0.0241    0.464     0.330           -0.398\n# ℹ 703 more rows\n# ℹ 13 more variables: forestArea <dbl>, fossilFuel <dbl>, gini <dbl>,\n#   govtEfficacy <dbl>, incomeLowest20 <dbl>, internet <dbl>,\n#   lifeExpectancy <dbl>, popDensity <dbl>, renewableElec <dbl>,\n#   renewableEnergy <dbl>, research <dbl>, schoolEnroll <dbl>, co2 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### Linear Model Fit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_spec <- \n    linear_reg() %>% \n    set_engine(engine = 'lm') %>% \n    set_mode('regression')\nesg_model_wf1 <- workflow() %>%\n  add_recipe(esg_rec) %>% \n  add_model(lm_spec)\n \nesg_fit_model1 <- esg_model_wf1 %>% \n  fit(data = esgdataAll_sub)\nesg_fit_model1 %>% tidy() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 5\n   term            estimate std.error statistic   p.value\n   <chr>              <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)       6.55       0.105    62.3   4.59e-287\n 2 electricity       0.0221     0.170     0.130 8.97e-  1\n 3 agroLand         -0.143      0.146    -0.975 3.30e-  1\n 4 agroValue        -0.842      0.200    -4.21  2.86e-  5\n 5 energyIntensity   1.14       0.148     7.72  4.09e- 14\n 6 forestArea        0.264      0.161     1.64  1.00e-  1\n 7 fossilFuel        0.775      0.212     3.65  2.77e-  4\n 8 gini             -0.497      0.460    -1.08  2.81e-  1\n 9 govtEfficacy      2.18       0.251     8.69  2.52e- 17\n10 incomeLowest20   -0.408      0.433    -0.944 3.46e-  1\n11 internet          0.425      0.204     2.08  3.75e-  2\n12 lifeExpectancy   -0.835      0.240    -3.49  5.21e-  4\n13 popDensity       -0.492      0.123    -3.99  7.46e-  5\n14 renewableElec    -0.119      0.220    -0.541 5.89e-  1\n15 renewableEnergy  -1.20       0.306    -3.93  9.53e-  5\n16 research          0.477      0.187     2.55  1.10e-  2\n17 schoolEnroll     -0.185      0.134    -1.39  1.66e-  1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Getting metrics\ncv_output <- fit_resamples( # new function for tuning parameters\n  esg_model_wf1, # workflow\n  resamples = esgdata_cv10, # cv folds\n  metrics = metric_set(rmse, mae, rsq)\n)\ncv_output %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 mae     standard   1.99     10  0.0972 Preprocessor1_Model1\n2 rmse    standard   2.79     10  0.178  Preprocessor1_Model1\n3 rsq     standard   0.631    10  0.0262 Preprocessor1_Model1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Residuals \nesg_fit_model1_residuals <- bind_cols(esgdataAll_sub, esg_fit_model1 %>% \n  predict(new_data = esgdataAll_sub)) %>%\n  mutate(resid = co2 - .pred)\nggplot(esg_fit_model1_residuals, aes(x = .pred, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    ggtitle(\"Linear Regression Residuals\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()    # fit to the training data \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n### LASSO Model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_rec <- recipe(co2 ~ . , data = esgdataAll_sub) %>%\n  update_role(`Year`,new_role = 'ID') %>%\n  update_role(`CountryCode`,new_role = 'ID') %>%\n  update_role(`CountryName`,new_role = 'ID') %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_normalize(all_numeric_predictors()) %>%  # important standardization step for LASSO\n    step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\n# Lasso Model Spec with tune\nlm_lasso_spec_tune <- \n  linear_reg() %>%\n  set_args(mixture = 1, penalty = tune()) %>% ## mixture = 1 indicates Lasso\n  set_engine(engine = 'glmnet') %>% #note we are using a different engine\n  set_mode('regression') \n# Workflow (Recipe + Model)\nlasso_wf_tune <- workflow() %>% \n  add_recipe(data_rec) %>%\n  add_model(lm_lasso_spec_tune) \n# Tune Model (trying a variety of values of Lambda penalty)\npenalty_grid <- grid_regular(\n  penalty(range = c(-3, 1)), #log10 transformed \n  levels = 30)\ntune_output <- tune_grid( # new function for tuning hyperparameters\n  lasso_wf_tune, # workflow\n  resamples = esgdata_cv10, # cv folds\n  metrics = metric_set(rmse, mae),\n  grid = penalty_grid # penalty grid defined above\n)\nautoplot(tune_output) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Picking LASSO Penalty\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_penalty <- select_best(tune_output, metric = 'mae') # choose penalty value based on lowest mae\nbest_penalty\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  penalty .config              \n    <dbl> <chr>                \n1  0.0621 Preprocessor1_Model14\n```\n\n\n:::\n\n```{.r .cell-code}\nbest_se_penalty <- select_by_one_std_err(tune_output, metric = 'mae', desc(penalty)) # choose penalty value based on the largest penalty within 1 se of the lowest CV MAE\nbest_se_penalty\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  penalty .config              \n    <dbl> <chr>                \n1   0.304 Preprocessor1_Model19\n```\n\n\n:::\n\n```{.r .cell-code}\nfinal_wf <- finalize_workflow(lasso_wf_tune, best_penalty) # incorporates penalty value to workflow\nfinal_wf_se <- finalize_workflow(lasso_wf_tune, best_se_penalty) # incorporates penalty value to workflow\nfinal_fit <- fit(final_wf, data = esgdataAll_sub)\nfinal_fit_se <- fit(final_wf_se, data = esgdataAll_sub)\ntidy(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 3\n   term            estimate penalty\n   <chr>              <dbl>   <dbl>\n 1 (Intercept)       6.55    0.0621\n 2 electricity       0       0.0621\n 3 agroLand         -0.0705  0.0621\n 4 agroValue        -0.855   0.0621\n 5 energyIntensity   1.10    0.0621\n 6 forestArea        0.178   0.0621\n 7 fossilFuel        0.582   0.0621\n 8 gini             -0.0429  0.0621\n 9 govtEfficacy      1.89    0.0621\n10 incomeLowest20    0       0.0621\n11 internet          0.284   0.0621\n12 lifeExpectancy   -0.413   0.0621\n13 popDensity       -0.438   0.0621\n14 renewableElec    -0.199   0.0621\n15 renewableEnergy  -1.15    0.0621\n16 research          0.507   0.0621\n17 schoolEnroll     -0.219   0.0621\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy(final_fit_se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 3\n   term             estimate penalty\n   <chr>               <dbl>   <dbl>\n 1 (Intercept)      6.55       0.304\n 2 electricity      0          0.304\n 3 agroLand         0          0.304\n 4 agroValue       -0.751      0.304\n 5 energyIntensity  0.760      0.304\n 6 forestArea       0          0.304\n 7 fossilFuel       0.000135   0.304\n 8 gini             0          0.304\n 9 govtEfficacy     1.36       0.304\n10 incomeLowest20   0          0.304\n11 internet         0          0.304\n12 lifeExpectancy   0          0.304\n13 popDensity      -0.115      0.304\n14 renewableElec   -0.241      0.304\n15 renewableEnergy -1.18       0.304\n16 research         0.598      0.304\n17 schoolEnroll    -0.167      0.304\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglmnet_output <- final_fit_se %>% extract_fit_parsnip() %>% pluck('fit') # way to get the original glmnet output\nlambdas <- glmnet_output$lambda\ncoefs_lambdas <- \n  coefficients(glmnet_output, s = lambdas )  %>% \n  as.matrix() %>%  \n  t() %>% \n  as.data.frame() %>% \n  mutate(lambda = lambdas ) %>% \n  select(lambda, everything(), -`(Intercept)`) %>% \n  pivot_longer(cols = -lambda, \n               names_to = \"term\", \n               values_to = \"coef\") %>%\n  mutate(var = map_chr(stringr::str_split(term,\"_\"),~.[1]))\ncoefs_lambdas %>%\n  ggplot(aes(x = lambda, y = coef, group = term, color = var)) +\n  geom_line() +\n  geom_vline(xintercept = best_se_penalty %>% pull(penalty), linetype = 'dashed') + \n  theme_classic() + \n  theme(legend.position = \"bottom\", legend.text=element_text(size=8))\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Create a boolean matrix (predictors x lambdas) of variable exclusion\nbool_predictor_exclude <- glmnet_output$beta==0\n# Loop over each variable\nvar_imp <- sapply(seq_len(nrow(bool_predictor_exclude)), function(row) {\n    this_coeff_path <- bool_predictor_exclude[row,]\n    if(sum(this_coeff_path) == ncol(bool_predictor_exclude)){ return(0)}else{\n    return(ncol(bool_predictor_exclude) - which.min(this_coeff_path) + 1)}\n})\n# Create a dataset of this information and sort\nvar_imp_data <- tibble(\n    var_name = rownames(bool_predictor_exclude),\n    var_imp = var_imp\n)\nvar_imp_data %>% arrange(desc(var_imp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 2\n   var_name        var_imp\n   <chr>             <dbl>\n 1 govtEfficacy         75\n 2 agroValue            74\n 3 renewableElec        73\n 4 renewableEnergy      73\n 5 research             73\n 6 energyIntensity      63\n 7 gini                 63\n 8 schoolEnroll         60\n 9 popDensity           55\n10 fossilFuel           53\n11 internet             52\n12 forestArea           46\n13 agroLand             44\n14 lifeExpectancy       44\n15 incomeLowest20       18\n16 electricity          10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit_se %>% tidy() %>% filter(estimate != 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   term             estimate penalty\n   <chr>               <dbl>   <dbl>\n 1 (Intercept)      6.55       0.304\n 2 agroValue       -0.751      0.304\n 3 energyIntensity  0.760      0.304\n 4 fossilFuel       0.000135   0.304\n 5 govtEfficacy     1.36       0.304\n 6 popDensity      -0.115      0.304\n 7 renewableElec   -0.241      0.304\n 8 renewableEnergy -1.18       0.304\n 9 research         0.598      0.304\n10 schoolEnroll    -0.167      0.304\n```\n\n\n:::\n\n```{.r .cell-code}\ntune_output %>% collect_metrics() %>% filter(penalty == (best_se_penalty %>% pull(penalty)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 7\n  penalty .metric .estimator  mean     n std_err .config              \n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1   0.304 mae     standard    2.04    10   0.111 Preprocessor1_Model19\n2   0.304 rmse    standard    2.91    10   0.204 Preprocessor1_Model19\n```\n\n\n:::\n\n```{.r .cell-code}\nlasso_mod_out <- final_fit_se %>%\n    predict(new_data = esgdataAll_sub) %>%\n    bind_cols(esgdataAll_sub) %>%\n    mutate(resid = co2 - .pred)\nggplot(esg_fit_model1_residuals, aes(x = .pred, y = resid)) +\n    geom_point() +\n    ggtitle('Linear Regression Final Model') +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()    # fit to the training data \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlasso_mod_out %>% \n  ggplot(aes(x = .pred, y = resid)) + \n  ggtitle('LASSO Residuals') +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  geom_hline(yintercept = 0, color = \"red\") + \n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\n\n\n### GAMs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngam_spec <- \n  gen_additive_mod() %>%\n  set_engine(engine = 'mgcv') %>%\n  set_mode('regression') \ngam_mod <- fit(gam_spec,\n    co2 ~ s(agroValue) + s(energyIntensity) + s(fossilFuel) + s(govtEfficacy) + s(popDensity) + s(renewableElec) + s(research) + s(schoolEnroll),\n    data = esgdataAll_sub\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngam_mod %>% pluck('fit') %>% plot( all.terms = TRUE, pages = 1)\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngam_mod %>% pluck('fit') %>% summary() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nco2 ~ s(agroValue) + s(energyIntensity) + s(fossilFuel) + s(govtEfficacy) + \n    s(popDensity) + s(renewableElec) + s(research) + s(schoolEnroll)\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  6.55010    0.06926   94.58   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n                     edf Ref.df      F  p-value    \ns(agroValue)       8.600  8.948 13.878  < 2e-16 ***\ns(energyIntensity) 8.801  8.985 27.180  < 2e-16 ***\ns(fossilFuel)      8.468  8.909 11.883  < 2e-16 ***\ns(govtEfficacy)    7.026  8.134  9.503  < 2e-16 ***\ns(popDensity)      8.957  8.999 13.224  < 2e-16 ***\ns(renewableElec)   7.970  8.705  5.465 1.28e-06 ***\ns(research)        8.182  8.817  9.380  < 2e-16 ***\ns(schoolEnroll)    7.599  8.511  5.386 1.24e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.831   Deviance explained = 84.6%\nGCV = 3.7724  Scale est. = 3.42      n = 713\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngam_data_rec <- recipe(co2 ~ agroValue + energyIntensity + fossilFuel + govtEfficacy + popDensity + renewableElec + research + schoolEnroll , data = esgdataAll_sub) %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_dummy(all_nominal_predictors()) %>%  # creates indicator variables for categorical variables\n     step_ns(agroValue, deg_free = 9) %>% \n     step_ns(energyIntensity, deg_free = 9) %>%\n     step_ns(fossilFuel, deg_free = 8) %>%\n     step_ns(govtEfficacy, deg_free = 7) %>%\n     step_ns(popDensity, deg_free = 9) %>%\n     step_ns(renewableElec, deg_free = 8) %>%\n     step_ns(research, deg_free = 8) %>% \n    step_ns(schoolEnroll, deg_free = 8)\nspline_wf <- workflow() %>%\n    add_model(lm_spec) %>%\n    add_recipe(gam_data_rec)\nfit_resamples(\n    spline_wf ,\n    resamples = esgdata_cv10, # cv folds\n    metrics = metric_set(mae,rsq)                     \n) %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 mae     standard   1.40     10  0.0368 Preprocessor1_Model1\n2 rsq     standard   0.822    10  0.0133 Preprocessor1_Model1\n```\n\n\n:::\n\n```{.r .cell-code}\nesg_gam_model2 <- spline_wf %>% fit(data=esgdataAll_sub)\nesg_gam_model2_residuals <- bind_cols(esgdataAll_sub, esg_gam_model2 %>% \n  predict(new_data = esgdataAll_sub)) %>%\n  mutate(resid = co2 - .pred)\nresid_agro <- ggplot(esg_gam_model2_residuals, aes(x = agroValue, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()   \nresid_energy <- ggplot(esg_gam_model2_residuals, aes(x = energyIntensity, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic() \nresid_fossil <- ggplot(esg_gam_model2_residuals, aes(x = fossilFuel, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nresid_govt <- ggplot(esg_gam_model2_residuals, aes(x = govtEfficacy, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nresid_density <- ggplot(esg_gam_model2_residuals, aes(x = popDensity, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nresid_renewable <- ggplot(esg_gam_model2_residuals, aes(x = renewableElec, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nresid_research <- ggplot(esg_gam_model2_residuals, aes(x = research, y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nresid_school <- ggplot(esg_gam_model2_residuals, aes(x = agroValue , y = resid)) +\n    geom_point() +\n    geom_smooth() +\n    geom_hline(yintercept = 0, color = \"red\") +\n    labs(x = \"Fitted values\", y = \"Residuals\") +\n    theme_classic()\nggplot(esg_gam_model2_residuals, aes(x = resid, y = co2)) +\n    geom_point(alpha = 0.25) +\n    geom_smooth(color = \"blue\", se = FALSE) +\n    theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggarrange(resid_agro, resid_energy, resid_fossil, resid_govt, resid_density, resid_renewable, resid_research, resid_school + rremove(\"x.text\"), \n          labels = c(\"agroValue Residuals\", \"energyIntensity Residuals\", \"fossilFuel Residuals\", \"govtEfficacy Residuals\", \"popDensity Residuals\", \"renewableElec Residuals\", \"research Residuals\", \"schoolEnroll Residuals\"),\n          ncol = 4, nrow = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n\n\n## Classification Models\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(esgdataAll_sub[[\"co2\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.550097\n```\n\n\n:::\n\n```{.r .cell-code}\nesgdataAll_sub <- esgdataAll_sub %>%\n  mutate(CO2cat = if_else(esgdataAll_sub$co2 > 6.550097, 'high_co2','low_co2'))\nesgdataAll_sub <- esgdataAll_sub %>%\n  mutate(CO2cat = relevel(factor(CO2cat), ref= 'low_co2'))\n```\n:::\n\n\n\n\n> We will be using 6.550097 as the split for deciding if the country has high CO2 emissions or low CO2 emissions. \\### Logistic Regression\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logistic Regression Model Spec\n\nlogistic_spec <- logistic_reg() %>%\n    set_engine('glm') %>%\n    set_mode('classification')\n    \n# Recipe\n logistic_rec <- recipe( CO2cat ~ ., data = esgdataAll_sub) %>%\n    update_role(`CountryCode`,new_role = 'ID') %>%\n     update_role(`CountryName`,new_role = 'ID') %>%\n     step_rm(co2) %>%\n     step_nzv(all_predictors()) %>% # removes variables with the same value\n     step_normalize(all_numeric_predictors()) %>%  # important standardization step for LASSO\n     step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\n# Workflow (Recipe + Model)\n\nlog_wf <- workflow() %>% \n    add_recipe(logistic_rec) %>%\n    add_model(logistic_spec) \n# Fit Model to Training Data\nlog_fit <- fit(log_wf, data = esgdataAll_sub)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n\n\n:::\n:::\n\n\n\n\n**Examining the logistic model**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print out Coefficients\nlog_fit %>% tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   term            estimate std.error statistic  p.value\n   <chr>              <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)       -2.16      0.351    -6.16  7.38e-10\n 2 Year              -0.770     0.276    -2.79  5.32e- 3\n 3 electricity        0.517     1.09      0.476 6.34e- 1\n 4 agroLand          -0.654     0.260    -2.51  1.21e- 2\n 5 agroValue         -3.62      0.566    -6.38  1.72e-10\n 6 energyIntensity    1.77      0.287     6.17  6.68e-10\n 7 forestArea        -0.234     0.239    -0.979 3.27e- 1\n 8 fossilFuel         2.04      0.288     7.09  1.30e-12\n 9 gini              -0.431     0.744    -0.580 5.62e- 1\n10 govtEfficacy       0.954     0.416     2.29  2.19e- 2\n11 incomeLowest20    -0.484     0.640    -0.757 4.49e- 1\n12 internet           1.23      0.437     2.82  4.84e- 3\n13 lifeExpectancy    -0.357     0.286    -1.25  2.12e- 1\n14 popDensity        -0.794     0.164    -4.85  1.25e- 6\n15 renewableElec     -0.624     0.404    -1.54  1.23e- 1\n16 renewableEnergy   -0.392     0.511    -0.767 4.43e- 1\n17 research           0.531     0.267     1.99  4.70e- 2\n18 schoolEnroll      -0.616     0.223    -2.75  5.88e- 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get Exponentiated coefficients + CI\nlog_fit %>% tidy() %>%\n  mutate(OR.conf.low = exp(estimate - 1.96*std.error), OR.conf.high = exp(estimate + 1.96*std.error)) %>% # do this first\n  mutate(OR = exp(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 8\n   term    estimate std.error statistic  p.value OR.conf.low OR.conf.high     OR\n   <chr>      <dbl>     <dbl>     <dbl>    <dbl>       <dbl>        <dbl>  <dbl>\n 1 (Inter…   -2.16      0.351    -6.16  7.38e-10     0.0578        0.229  0.115 \n 2 Year      -0.770     0.276    -2.79  5.32e- 3     0.269         0.796  0.463 \n 3 electr…    0.517     1.09      0.476 6.34e- 1     0.200        14.1    1.68  \n 4 agroLa…   -0.654     0.260    -2.51  1.21e- 2     0.312         0.866  0.520 \n 5 agroVa…   -3.62      0.566    -6.38  1.72e-10     0.00886       0.0816 0.0269\n 6 energy…    1.77      0.287     6.17  6.68e-10     3.36         10.4    5.90  \n 7 forest…   -0.234     0.239    -0.979 3.27e- 1     0.495         1.26   0.791 \n 8 fossil…    2.04      0.288     7.09  1.30e-12     4.39         13.6    7.71  \n 9 gini      -0.431     0.744    -0.580 5.62e- 1     0.151         2.79   0.650 \n10 govtEf…    0.954     0.416     2.29  2.19e- 2     1.15          5.87   2.60  \n11 income…   -0.484     0.640    -0.757 4.49e- 1     0.176         2.16   0.616 \n12 intern…    1.23      0.437     2.82  4.84e- 3     1.45          8.05   3.42  \n13 lifeEx…   -0.357     0.286    -1.25  2.12e- 1     0.400         1.23   0.700 \n14 popDen…   -0.794     0.164    -4.85  1.25e- 6     0.328         0.623  0.452 \n15 renewa…   -0.624     0.404    -1.54  1.23e- 1     0.243         1.18   0.536 \n16 renewa…   -0.392     0.511    -0.767 4.43e- 1     0.248         1.84   0.676 \n17 resear…    0.531     0.267     1.99  4.70e- 2     1.01          2.87   1.70  \n18 school…   -0.616     0.223    -2.75  5.88e- 3     0.349         0.837  0.540 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_output <-  esgdataAll_sub %>%\n  bind_cols(predict(log_fit, new_data = esgdataAll_sub, type = 'prob')) \n# Hard predictions (you pick threshold)\nlogistic_output <- logistic_output %>%\n  mutate(.pred_class = make_two_class_pred(.pred_low_co2, levels(CO2cat), threshold = .55)) #Try changing threshold (.5, 0, 1, .2, .8)\n# Visualize Soft Predictions\nlogistic_output %>%\n  ggplot(aes(x = CO2cat, y = .pred_low_co2)) +\n  geom_boxplot() + \n  geom_hline(yintercept = 0.55, color='red') +  # try changing threshold\n  labs(y = 'Predicted Probability of Low CO2', x = 'Observed Outcome') +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlogistic_output %>%\n  conf_mat(truth = CO2cat, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction low_co2 high_co2\n  low_co2      357       39\n  high_co2      45      272\n```\n\n\n:::\n\n```{.r .cell-code}\nlog_metrics <- metric_set(sens, yardstick::spec, accuracy) # these metrics are based on hard predictions\n#sens: sensitivity = chance of correctly predicting second level, given second level (Yes)\n#spec: specificity = chance of correctly predicting first level, given first level (No)\n#accuracy: accuracy = chance of correctly predicting outcome\nlogistic_output %>% \n   log_metrics(estimate = .pred_class, truth = CO2cat, event_level = \"second\") # set second level of outcome as \"success\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 sens     binary         0.875\n2 spec     binary         0.888\n3 accuracy binary         0.882\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n logistic_output <-  esgdataAll_sub %>%\n   bind_cols(predict(log_fit, new_data = esgdataAll_sub, type = 'prob')) \n logistic_roc <- logistic_output %>% \n     roc_curve(CO2cat, .pred_high_co2, event_level = \"second\") # set second level of outcome as \"success\"\n autoplot(logistic_roc) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n set.seed(123)\n esgdataAll_sub_cv10 <- vfold_cv(esgdataAll_sub, v = 10)\n # CV Fit Model\n log_cv_fit <- fit_resamples(\n     log_wf, \n     resamples = esgdataAll_sub_cv10,\n     metrics = metric_set(sens, yardstick::spec, accuracy, roc_auc),\n     control = control_resamples(save_pred = TRUE, event_level = 'second'))  # you need predictions for ROC calculations\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n→ A | warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThere were issues with some computations   A: x1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThere were issues with some computations   A: x10\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n```{.r .cell-code}\n collect_metrics(log_cv_fit) #default threshold is 0.5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy binary     0.864    10 0.0128  Preprocessor1_Model1\n2 roc_auc  binary     0.943    10 0.00729 Preprocessor1_Model1\n3 sens     binary     0.843    10 0.0250  Preprocessor1_Model1\n4 spec     binary     0.882    10 0.0139  Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n### Decision tree\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(726) # don't change this\nct_spec_tune <- decision_tree() %>%\n  set_engine(engine = 'rpart') %>%\n  set_args(cost_complexity = tune(),  \n           min_n = 2, \n           tree_depth = NULL) %>% \n  set_mode('classification') \ndata_rec <- recipe(CO2cat ~ ., data = esgdataAll_sub) %>%\n    update_role(`CountryCode`,new_role = 'ID') %>%\n    update_role(`CountryName`,new_role = 'ID') %>%\n    step_rm(co2) %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\ndata_wf_tune <- workflow() %>%\n  add_model(ct_spec_tune) %>%\n  add_recipe(data_rec)\nparam_grid <- grid_regular(cost_complexity(range = c(-5, 1)), levels = 10) \ntune_res <- tune_grid(\n  data_wf_tune, \n  resamples = esgdataAll_sub_cv10, \n  grid = param_grid, \n  metrics = metric_set(accuracy) #change this for regression trees\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(tune_res) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_complexity <- select_by_one_std_err(tune_res, metric = 'accuracy', desc(cost_complexity))\ndata_wf_final <- finalize_workflow(data_wf_tune, best_complexity)\nesg_final_fit <- fit(data_wf_final, data = esgdataAll_sub)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_final_fit %>% extract_fit_engine() %>% rpart.plot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_mod_highcp <- fit(\n    data_wf_tune %>%\n        update_model(ct_spec_tune %>% set_args(cost_complexity = .01)),\n    data = esgdataAll_sub\n)\ntree_mod_highcp %>% extract_fit_engine() %>% rpart.plot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n### Random Forest\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model Specification\nrf_spec <- rand_forest() %>%\n  set_engine(engine = 'ranger') %>% \n  set_args(mtry = NULL, # size of random subset of variables; default is floor(sqrt(number of total predictors))\n           trees = 1000, # Number of trees\n           min_n = 2,\n           probability = FALSE, # FALSE: get hard predictions (not needed for regression)\n           importance = 'impurity') %>% # we'll come back to this at the end\n  set_mode('classification') # change this for regression\n# Recipe\ndata_rec_rf <- recipe(CO2cat ~ ., data = esgdataAll_sub) %>%\n  update_role(`CountryCode`,new_role = 'ID') %>%\n    update_role(`CountryName`,new_role = 'ID') %>%\n    step_rm(co2) %>%\n    step_nzv(all_predictors()) %>% # removes variables with the same value\n    step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables\n# Workflows\ndata_wf_mtry2 <- workflow() %>%\n  add_model(rf_spec %>% set_args(mtry = 2)) %>%\n  add_recipe(data_rec_rf)\n## Create workflows for mtry = 4, 9, and 17\ndata_wf_mtry4 <- workflow() %>%\n  add_model(rf_spec %>% set_args(mtry = 4)) %>%\n  add_recipe(data_rec_rf)\ndata_wf_mtry9 <- workflow() %>%\n  add_model(rf_spec %>% set_args(mtry = 9)) %>%\n  add_recipe(data_rec_rf)\ndata_wf_mtry17 <- workflow() %>%\n  add_model(rf_spec %>% set_args(mtry = 17)) %>%\n  add_recipe(data_rec_rf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(726) # make sure to run this before each fit so that you have the same 1000 trees\ndata_fit_mtry2 <- fit(data_wf_mtry2, data = esgdataAll_sub)\nset.seed(726)\ndata_fit_mtry4 <- fit(data_wf_mtry4, data = esgdataAll_sub)\nset.seed(726) \ndata_fit_mtry9 <- fit(data_wf_mtry9, data = esgdataAll_sub)\nset.seed(726)\ndata_fit_mtry17 <- fit(data_wf_mtry17, data = esgdataAll_sub)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_OOB_output <- function(fit_model, model_label, truth){\n    tibble(\n          .pred_class = fit_model %>% extract_fit_engine() %>% pluck('predictions'), #OOB predictions\n          class = truth,\n          model = model_label\n      )\n}\n#check out the function output\nrf_OOB_output(data_fit_mtry2,'mtry2', esgdataAll_sub %>% pull(CO2cat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 713 × 3\n   .pred_class class   model\n   <fct>       <fct>   <chr>\n 1 low_co2     low_co2 mtry2\n 2 low_co2     low_co2 mtry2\n 3 low_co2     low_co2 mtry2\n 4 low_co2     low_co2 mtry2\n 5 low_co2     low_co2 mtry2\n 6 low_co2     low_co2 mtry2\n 7 low_co2     low_co2 mtry2\n 8 low_co2     low_co2 mtry2\n 9 low_co2     low_co2 mtry2\n10 low_co2     low_co2 mtry2\n# ℹ 703 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_rf_OOB_output <- bind_rows(\n    rf_OOB_output(data_fit_mtry2,'mtry2', esgdataAll_sub %>% pull(CO2cat)),\n    rf_OOB_output(data_fit_mtry4,'mtry4', esgdataAll_sub %>% pull(CO2cat)),\n    rf_OOB_output(data_fit_mtry9,'mtry9', esgdataAll_sub %>% pull(CO2cat)),\n    rf_OOB_output(data_fit_mtry17,'mtry17', esgdataAll_sub %>% pull(CO2cat))\n)\ndata_rf_OOB_output %>% \n    group_by(model) %>%\n    accuracy(truth = class, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  model  .metric  .estimator .estimate\n  <chr>  <chr>    <chr>          <dbl>\n1 mtry17 accuracy binary         0.954\n2 mtry2  accuracy binary         0.959\n3 mtry4  accuracy binary         0.959\n4 mtry9  accuracy binary         0.962\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_rf_OOB_output %>% \n    group_by(model) %>%\n    accuracy(truth = class, estimate = .pred_class) %>%\n  mutate(mtry = as.numeric(stringr::str_replace(model,'mtry',''))) %>%\n  ggplot(aes(x = mtry, y = .estimate )) + \n  geom_point() +\n  geom_line() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_OOB_output(data_fit_mtry9,'mtry9', esgdataAll_sub %>% pull(CO2cat)) %>%\n    conf_mat(truth = class, estimate= .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction low_co2 high_co2\n  low_co2      389       14\n  high_co2      13      297\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_fit_mtry9 %>% \n    extract_fit_engine() %>% \n    vip(num_features = 30) + theme_classic() #based on impurity\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n## Clustering\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSUB = esgdataAll_sub %>%\n  select(co2,govtEfficacy,agroValue,research,renewableEnergy)\nset.seed(123)\nkclust_k4 <- kmeans(scale(SUB), centers = 4)\nesgdataAll_sub <- esgdataAll_sub %>%\n    mutate(kclust_4 = factor(kclust_k4$cluster))\nggplot(esgdataAll_sub,aes(co2,govtEfficacy,color=kclust_4)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(esgdataAll_sub,aes(co2,agroValue,color=kclust_4)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(esgdataAll_sub,aes(co2,renewableEnergy,color=kclust_4)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-30-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(esgdataAll_sub,aes(co2,research,color=kclust_4)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-30-4.png){width=672}\n:::\n\n```{.r .cell-code}\nesgdataAll_sub %>%\n    group_by(kclust_4) %>%\n    summarize(across(c(co2,govtEfficacy,agroValue,research,renewableEnergy), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  kclust_4   co2 govtEfficacy agroValue research renewableEnergy\n  <fct>    <dbl>        <dbl>     <dbl>    <dbl>           <dbl>\n1 1        10.5         1.71       1.64    2.46             22.4\n2 2         1.03       -0.689     20.3     0.193            51.3\n3 3         3.42       -0.107      7.82    0.441            20.6\n4 4         7.85        0.823      2.82    1.01             10.3\n```\n\n\n:::\n\n```{.r .cell-code}\nesgdataAll_sub %>%\n  count(kclust_4, CountryName)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 102 × 3\n   kclust_4 CountryName        n\n   <fct>    <chr>          <int>\n 1 1        Australia          2\n 2 1        Austria           14\n 3 1        Belgium           14\n 4 1        Canada             9\n 5 1        Czech Republic     2\n 6 1        Denmark           12\n 7 1        Estonia            6\n 8 1        Finland           14\n 9 1        France            13\n10 1        Germany           16\n# ℹ 92 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_cluster_ss <- function(k){\n    # Perform clustering\n    kclust <- kmeans(scale(SUB), centers = k)\n    # Return the total within-cluster sum of squares\n    return(kclust$tot.withinss)\n}\ntibble(\n    k = 1:15,\n    tot_wc_ss = purrr::map_dbl(1:15, esg_cluster_ss)\n) %>% \n    ggplot(aes(x = k, y = tot_wc_ss)) +\n    geom_point() + \n    labs(x = \"Number of clusters\",y = 'Total within-cluster sum of squares') + \n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](Final_Code_Appendix_Ayaa_Julia_Ting_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Final_Code_Appendix_Ayaa_Julia_Ting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}